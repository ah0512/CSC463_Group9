/* 
   Project 3 - Fuzzy Logic
   Andrew Mueller & Austin Hamman
   CSC 463 - Dr. Girard
*/

int LEFT_MOTOR = 0;
int RIGHT_MOTOR = 2;
int LEFT_SENSOR = 5;
int RIGHT_SENSOR = 6;  

//FUZZY VALUES:
float NB = -60.0; //-75
float NS = -30.0; //-25
float N = 0.0;  //0
float PS = 30.0; //25
float PB = 60.0; //75

//MOTOR FUZZY INPUT
float lVeryLow;
float lLow;
float lHigh;
float lVeryHigh;

float rVeryLow;
float rLow;
float rHigh;
float rVeryHigh;

//MOTOR MOD VALUE
float VH = 100.0;
float H = 75.0;
float L = 50.0;
float VL = 25.0;

//MOTOR CRISP OUTPUT
int rightMotor;
int leftMotor;

void forward(){
    fd(LEFT_MOTOR);
    fd(RIGHT_MOTOR);
}

void stop(){
    off(LEFT_MOTOR);
    off(RIGHT_MOTOR);
}

float readSensor(){
    float sensor = (float)(analog(LEFT_SENSOR) - analog(RIGHT_SENSOR));
    printf("sensor = %f\n", sensor);
    sleep(1.0);
    return sensor;
}

//Receive crisp sensor input and fuzzify it by setting all the fuzzy output values
void fuzzify(float sensor){
   lVeryLow = 0.0;
   lLow = 0.0;
   lHigh = 0.0;
   lVeryHigh = 0.0;

   rVeryLow = 0.0;
   rLow = 0.0;
   rHigh = 0.0;
   rVeryHigh = 0.0;
   //27
    if(sensor <= NB) //-60 to - infinite
      {
         lVeryHigh = 1.0;
         rVeryLow = 1.0;
    }else if (sensor > NB && sensor <= ((NS+NB)/2.0))//-60 t0 -45
      {
        lVeryHigh = sensor/(PB+PS);
        lHigh = 1.0 - lVeryHigh;
        rVeryLow = sensor/(PB+PS);
        rLow = 1.0 - rVeryLow;
    }else if (sensor > ((NS+NB)/2.0) && sensor < NS)// -45 to -30
      {
         lHigh = sensor/(PB+PS);
         lVeryHigh = 1.0 - lHigh;
         rLow = sensor/(PB+PS);
         rVeryLow = 1.0 - rLow;
    }else if(sensor >= NS && sensor < N)//-30 to 0 
      {
         rHigh = 0.5;
         lLow = 0.5;
    }else if(sensor == N)// Zero
      {
        rVeryHigh = 1.0;
        lVeryHigh = 1.0;
    }else if(sensor > N && sensor <= PS)//0 to 30
      {
        rLow = 1.0;
        lHigh = 1.0;
    }else if(sensor > PS && sensor <= ((PB+PS)/2.0))// 30 to 45
      {
        rHigh = sensor/(PB+PS);
        rVeryHigh = 1.0-rHigh;
        lLow = sensor/(PB+PS);
        lVeryLow = 1.0 - lLow;
    }else if((sensor > ((PB+PS)/2.0)) && (sensor < PB))// 45 to 60
      {
        rVeryHigh = sensor/(PB+PS);
        rHigh = 1.0 - rVeryHigh;
        lVeryLow = sensor/(PB+PS);
        lLow = 1.0 - lVeryLow;
    }else if(sensor >= PB) // 60 to infinite
      {
         rVeryHigh = 1.0;
         lVeryLow = 1.0;
    }
}

//use fuzzy motor values and set to a crisp output
//sets motor speed to the crisp outputs
void setMotorSpeed(){
    //printf("Enter motorSpeed\n");
    //sleep(0.5);
    //printf("vl: %d\n",lVeryLow); 
   lVeryLow *= VL;
   lLow *= L;
   lHigh *= H;
   lVeryHigh *= VH;
   
   rVeryLow *= VH;
   rLow *= L;
   rHigh *= H;
   rVeryHigh *= VH;
   
   leftMotor = (int)(lVeryLow + lLow + lHigh + lVeryHigh);
   rightMotor = (int)(rVeryLow + rLow + rHigh + rVeryHigh);
    
    printf("Left: %d, Right: %d\n", leftMotor, rightMotor);
    sleep(0.5);
    motor(LEFT_MOTOR, leftMotor);
    motor(RIGHT_MOTOR, rightMotor);
}

void main() {
    float count = 0.0;
    while(1){
        count = readSensor();
        fuzzify(count);
        setMotorSpeed();
    }
}
