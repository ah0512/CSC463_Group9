/* 
   Project 3 - Fuzzy Logic
   Andrew Mueller & Austin Hamman
   CSC 463 - Dr. Girard
*/

int LEFT_MOTOR = 0;
int RIGHT_MOTOR = 2;
int LEFT_SENSOR = 6;
int RIGHT_SENSOR = 15;  
int time = 0;
int LINE = 100;
int turn = 0;

//MOTOR TABLE
float VL = 25.0;
float L = 50.0;
float H = 75.0;
float VH = 100.0;

//FUZZY VALUES:
float NB = -75.0; //-75
float NS = -25.0; //-25
float N = 0.0;  //0
float PS = 25.0; //25
float PB = 75.0; //75

//MOTOR FUZZY INPUT
float lVeryLow;
float lLow;
float lHigh;
float lVeryHigh;

float rVeryLow;
float rLow;
float rHigh;
float rVeryHigh;

//MOTOR CRISP OUTPUT
float rightMotor;
float leftMotor;

void forward(){
    fd(LEFT_MOTOR);
    fd(RIGHT_MOTOR);
}

void stop(){
    off(LEFT_MOTOR);
    off(RIGHT_MOTOR);
}

int readSensors(){
    int sensor = analog(RIGHT_SENSOR) - analog(LEFT_SENSOR);
    return sensor;
}

//Receive crisp sensor input and fuzzify it by setting all the fuzzy output values
void fuzzify(int sensor){
   lVeryLow = 0;
   lLow = 0;
   lHigh = 0;
   lVeryHigh = 0;

   rVeryLow = 0;
   rLow = 0;
   rHigh = 0;
   rVeryHigh = 0;
   
    if(sensor <= NB){
         lVeryHigh = 1.0;
         rVeryLow = 1.0;
    }else if (sensor > NB && sensor <= ((NS+NB)/2)){
        rVeryHigh = sensor/(PB+PS);
        rHigh = 1.0 - rVeryHigh;
        lVeryLow = sensor/(PB+PS);
        lLow = 1.0 - lHigh;
    }else if (sensor > ((NS+NB)/2) && sensor < NS);{
         rHigh = sensor/(PB+PS);
         rVeryHigh = 1.0 - rHigh;
         lLow = sensor/(PB+PS);
         lVeryLow = 1.0 - lLow;
    }else if(sensor >= NS && sensor < N){
         rHigh = 1.0;
         lLow = 1.0;
    }else if(sensor == N){
        rVeryHigh = 1.0;
        lVeryHigh = 1.0;
    }else if(sensor > N && sensor <= PS){
        rLow = 1.0;
        lHigh = 1.0;
    }else if(sensor > PS && sensor <= ((PB+PS)/2){
        lHigh = sensor/(PB+PS);
        lVeryHigh = 1.0-lHigh;
        rLow = sensor/(PB+PS);
        rVeryLow = 1.0 - rLow;
    }else if(sensor > ((PB+PS)/2)) && sensor < PB){
        lVeryHigh = sensor/(PB+PS);
        lHigh = 1.0 - lVeryHigh;
        rVeryLow = sensor/(PB+PS);
        rLow = 1.0 - rVeryLow;
    }else if(sensor >= PB){
         rVeryHigh = 1.0;
         lVeryLow = 1.0;
    }
}

//use fuzzy motor values and set to a crisp output
//sets motor speed to the crisp outputs
void setMotorSpeed(){
   lVeryLow *= VL;
   lLow *= L;
   lHigh *= H;
   lVeryHigh *= VH;
   
   rVeryLow *= VH;
   rLow *= L
   rHigh *= H;
   rVeryHigh *= VH;
   
   leftMotor = lVeryLow + lLow + lHigh + lVeryHigh;
   rightMotor = rVeryLow + rLow + rHigh + rVeryHigh;
   
   motor(LEFT_MOTOR, leftMotor);
   motor(RIGHT_MOTOR, rightMotor);
}

void main() {
    while(1){
        forward();
        
        
    }
      
      
}
