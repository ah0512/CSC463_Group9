/* 
   Project 5 - Maze Following with Sersa
   Andrew Mueller & Austin Hamman
   CSC 463 - Dr. Girard
*/

int LEFT_MOTOR = 0; //Left Motor port
int RIGHT_MOTOR = 2; //Right Motor port
int leftTouch = 14;  //Left Touch sensor port
int rightTouch = 15; // Right touch sensor port
int frontTouch = 7;  // Front touch sensor port
int backTouch = 8;   // Back touch sensor port

int rightMotorPower;    //power level of right motor
int leftMotorPower;     //power level of left motor

void forward(int power) {     //move robot forward
   motor(RIGHT_MOTOR, power); //set right motor to power
   motor(LEFT_MOTOR, power);  //set left motor to power
   rightMotorPower = power;   //save power level of right motor
    leftMotorPower = power;    //save power level of left motor
}

void backward(int power) {     //move robot backward
   motor(RIGHT_MOTOR, -power); //set right motor to -power      
   motor(LEFT_MOTOR, -power);  //set left motor to -power
   rightMotorPower = -power;   //save power level of right motor
    leftMotorPower = -power;   //save power level of left motor
}

void turnLeft(int power) {     //make robot turn left
   motor(RIGHT_MOTOR, power);    //set right motor to -power
   motor(LEFT_MOTOR, -power);    //set left motor to -power
   rightMotorPower = power;      //save right motor power
    leftMotorPower = -power;     //save left motor power
}

void turnRight(int power) {     //make robot turn right
   motor(RIGHT_MOTOR, -power);  //set right motor to -power
   motor(LEFT_MOTOR, power);    //set left motor to -power
   rightMotorPower = -power;    //save right motor power
    leftMotorPower = power;     //save left motor power
}

void stop() {                  //stop robot
   off(RIGHT_MOTOR);           //turn right motor off
   off(LEFT_MOTOR);            //turn left motor off
   rightMotorPower = 0;        //save right motor power
    leftMotorPower = 0;        //save left motor power
}

void actionMoveBack(){        //robot moves back
  backward(50);
  sleep(0.50);
}

void actionTurnRight(){       //robot turns right slightly
  turnRight(80);
  sleep(1.0);
}

void actionTurnLeft(){       //robot turns left slighty
  turnLeft(80);
  sleep(1.0);
}

void actionMoveForward(){   //robot moves forward
  forward(60);
  sleep(0.1);
}

void actionTurnHardRight(){ //robot turns right hard
  turnRight(85);
  sleep(2.5);
}

void actionTurnHardLeft(){  //robot turns left hard
  turnLeft(85);
  sleep(2.5);
}

void actionStop(){          //stop robot
    stop();
    sleep(0.5);
}

float actionArray[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}; //create array with all reward values for all (7) actions

//Initialize all 7 action rewards to values of array
//All values equal 0.0 initially
float moveForward = actionArray[0];    //move forward set to index 0
float moveBack = actionArray[1];       //move back set to index 1
float moveRight = actionArray[2];      //move right set to index 2
float moveLeft = actionArray[3];       //move left set to index 3
float moveHardRight = actionArray[4];  //move hard right set to index 4
float moveHardLeft = actionArray[5];   //move hard left set to index 5
float moveStop = actionArray[6];       //stop set to index 6

int chooseAction()                     //decides which action to choose and returns that action
{
   int action = 0;                     
   float reward = -9999.0;
   int i;
   for(i = 0; i < 7; i++){             //for length of actionArray
      if (actionArray[i] >= reward){   //if reward value of the action is greater than the current reward
         reward = actionArray[i];      //set reward to the value of the action
         action = i;                   //save that index of actionArray in action
      }
   }
   
   return action;                     //return index of actionArray with best reward
}

void runAction(int action){           //run the action from the given index
   if (action == 0)
      actionMoveForward();
   if (action == 1)
      actionMoveBack();
   if (action == 2)
      actionTurnRight();
   if (action == 3)
      actionTurnLeft();
   if (action == 4)
      actionTurnHardRight();
   if (action == 5)
      actionTurnHardLeft();
   if (action == 6)
      actionStop();
}

//decide if robot is moving forward
int rewardForward(){
   if ((rightMotorPower == leftMotorPower) && (rightMotorPower > 0)) //if motor powers are equal and one power is positive
      return 1;       //return true
   else
      return 0;       //return false
}

//decide if robot is stopped
int rewardStopped(){
   if (rightMotorPower == 0 && leftMotorPower == 0)   //if both motor powers are 0
      return 1;     //return true
   else
      return 0;     //return false
}

/decide if robot hit wall
int rewardHitWall(){
   if (digital(frontTouch)){               //if any touch sensor is hit, return true
      return 1;
   }else if (digital(backTouch)){
      return 1;
   }else if(digital(leftTouch)){
      return 1;
   }else if (digital(rightTouch)){
      return 1;
   }else
      return 0;                            //if no sensor is hit, return false
}

//decide if robot is turning
int rewardTurning(){
   if(rightMotorPower != leftMotorPower)  //if right motor power does not equal left motor power
      return 1;                           //return true
   else 
      return 0;                           //return false
}

//reward table
//set rewards to actions
void reward(int action){              
    float reward = 0.0; 
   if(rewardForward()){              //if moving forward
      reward += 0.35;                //increment reward
    }
    if(rewardStopped()){             //if stopped
      reward += -0.1;                //decrement reward
    }else if (!rewardHitWall()){     //otherwise if it didn't hit wall
      reward += 0.15;                //increment reward
    }
    if(rewardTurning()){             //if it's turning decrement reward
      reward += -0.25;
    }
    if(rewardHitWall()){            //if it hit wall, decrement reward
      reward += -1.0;
    }

    actionArray[action] += reward;                     //add reward to the reward value in the array
    printf("%d: %f\n", action, actionArray[action]);   //print the action and the reward tied to that action
    sleep(0.2);                                        //sleep so we can read print
}

void main()
{
   int action;
   while(1){
      action = chooseAction();   //choose action and save index to action
      runAction(action);         //run action of that index
      reward(action);            //account for reward of that action
   }   
}
